// Copyright (c) 2016 Electronic Theatre Controls, Inc., http://www.etcconnect.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import QtQuick 2.5

import "style"


// A canvas that paints the waveform data generated by the bpm detector.
// Needs to repaint every time because peak data which sits on top of the
// Wave data might change over time,
Item {
    Canvas {
        id: canvas
        width: parent.width
        height: parent.height
        onPaint: {
            if (controller.getWaveformVisible()) {
                // --- Prepare ---
                var points = controller.getWavePoints();
                var onsets = controller.getWaveOnsets();
                var colors = controller.getWaveColors();
                var pointCount = onsets.length;
                var pointWidth = width / pointCount;
                var ctx = canvas.getContext('2d');

                // Draw a background for the new pixels
                ctx.fillStyle = Qt.rgba(0.15,0.15,0.15,1.0); // Does not work as hex string here for unknown reasons
                ctx.fillRect(0, 0, width, height);


                // Iterate thorugh samples and draw waveform
                ctx.lineWidth = pointWidth + 1;
                ctx.lineJoin = "bevel";
                for (var i=0; i < pointCount; i++) {
                    ctx.beginPath();
                    ctx.moveTo(i * pointWidth, height / 2 - points[i]);
                    ctx.lineTo(i * pointWidth, height / 2 + points[i]);
                    ctx.strokeStyle = colors[i];
                    ctx.stroke();

                    if (onsets[i]) {
                        ctx.beginPath();
                        ctx.lineTo(i * pointWidth - 1, 0);
                        ctx.lineTo(i * pointWidth - 1, height);
                        ctx.strokeStyle = "#FFFFFF";
                        ctx.stroke();
                    }
                }

            }

        }
        Timer {
            // Wave will be updated with 20Hz:
            interval: 50; running: true; repeat: true
            onTriggered: canvas.requestPaint()
        }
    }
}
